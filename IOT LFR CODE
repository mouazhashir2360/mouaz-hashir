#define echopin 53 // echo pin 
#define trigpin 51 // Trigger pin 
#define s0 33 //Module pins wiring 
#define s1 35 
#define s2 47 
#define s3 49 
#define out 37 
int Red=0, Blue=0, Green=0; 
int speed = 115; 
// Motor FRONT LEFT connections 
int en1A = 8; 
int in11 = 9; 
int in12 = 10; 
// Motor FRONT RIGHT connections 
int en1B = 13; 
int in13 = 11; 
int in14 = 12; 
// Motor BACK RIGHT connections 
int en2A = 2; 
int in21 = 3; 
int in22 = 4; 
// Motor BACK LEFT connections 
int en2B = 7; 
int in23 = 5; 
int in24 = 6; 
//ir sensor array RIGTHT TO LEFT 
int ir1 = 38; 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 
int ir2 =36; 
int ir3 = 34; 
int ir4 = 32; 
int ir5 = 30; 
long data(); 
void stop();
void directionControl(int , int ); 
void reverse(); 
void GetColors(); 
void setup() { 
pinMode(en1A, OUTPUT); 
pinMode(en1B, OUTPUT); 
pinMode(en2A, OUTPUT); 
pinMode(en2B, OUTPUT); 
pinMode(in11, OUTPUT); 
pinMode(in12, OUTPUT); 
pinMode(in13, OUTPUT); 
pinMode(in14, OUTPUT); 
pinMode(in21, OUTPUT); 
pinMode(in22, OUTPUT); 
pinMode(in23, OUTPUT); 
pinMode(in24, OUTPUT); 
pinMode (trigpin, OUTPUT); 
pinMode (echopin, INPUT); 
pinMode(ir1,INPUT); 
pinMode(ir2,INPUT); 
pinMode(ir3,INPUT); 
pinMode(ir4,INPUT); 
pinMode(ir5,INPUT); 
pinMode(s0,OUTPUT); //pin modes 
pinMode(s1,OUTPUT); 
pinMode(s2,OUTPUT); 
pinMode(s3,OUTPUT); 
pinMode(out,INPUT); 
Serial.begin(9600); 

PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 
digitalWrite(s0,HIGH); //Putting S0/S1 on HIGH/HIGH levels means the output frequency scalling is at 100% (recommended) 
digitalWrite(s1,HIGH); 
delay(1000); 
} 
void loop() {
if(digitalRead(ir2) == LOW && digitalRead(ir4) == LOW && digitalRead(ir4) == LOW) { directionControl(1,1); 
} 
else if(digitalRead(ir1) == LOW) 
{ 
directionControl(0,2); 
} 
else if (digitalRead(ir2) == LOW) 
{ 
directionControl(0,1); 
} 
else if(digitalRead(ir5) == LOW) 
{ 
directionControl(2,0); 
} 
else if (digitalRead(ir4) == LOW) 
{ 
directionControl(1,0); 
} 
else if(digitalRead(ir2) == HIGH && digitalRead(ir4) == HIGH && digitalRead(ir3) == LOW) { 
directionControl(0,0); 
} 
else if(digitalRead(ir2) == HIGH && digitalRead(ir4) == HIGH && digitalRead(ir3) == HIGH) { 
directionControl(2,2); 
} 
// turnLeft(); 
// delay(350); 
// forword(); 
// delay(1000); 
// turnRight(); 
// delay(200); 
// forword(); 
Page 12 of 26 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 // delay(500); 
} 
void stop() { 
analogWrite(en1A, 0); 
analogWrite(en1B, 0); 
analogWrite(en2A, 0); 
analogWrite(en2B, 0); 
while(1){}; 
}
void directionControl(int a, int b) { 
digitalWrite(in11, LOW); 
digitalWrite(in12, HIGH); 
digitalWrite(in13, HIGH); 
digitalWrite(in14, LOW); 
digitalWrite(in21, LOW); 
digitalWrite(in22, HIGH); 
digitalWrite(in23, LOW); 
digitalWrite(in24, HIGH); 
if (a == 0 && b==1) 
{ 
digitalWrite(in11, LOW); 
digitalWrite(in12, HIGH); 
digitalWrite(in13, LOW); 
digitalWrite(in14, HIGH); 
digitalWrite(in21, HIGH); 
digitalWrite(in22, LOW); 
digitalWrite(in23, LOW); 
digitalWrite(in24, HIGH); 
analogWrite(en1B, 160); 
analogWrite(en2A, 0); 
analogWrite(en2B, 160); 
analogWrite(en1A, 240); 
} 
if (a == 0 && b==2) 
{ 
digitalWrite(in11, LOW); 
digitalWrite(in12, HIGH); 
digitalWrite(in13, LOW); 
Page 13 of 26 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 digitalWrite(in14, HIGH); 
digitalWrite(in21, HIGH); 
digitalWrite(in22, LOW); 
digitalWrite(in23, LOW); 
digitalWrite(in24, HIGH); 
analogWrite(en1B, 160); 
analogWrite(en2A, 160); 
analogWrite(en2B, 160); 
analogWrite(en1A, 240);
} 
else if (b==0 && a == 1) 
{ 
digitalWrite(in11, HIGH); 
digitalWrite(in12, LOW); 
digitalWrite(in13, 
HIGH); 
digitalWrite(in14, LOW); 
digitalWrite(in21, LOW); 
digitalWrite(in22, 
HIGH); 
digitalWrite(in23, 
HIGH); 
digitalWrite(in24, LOW); 
analogWrite(en1A, 0); 
analogWrite(en2A, 160); 
analogWrite(en2B, 
240); 
analogWrite(en1B, 160); 
} 
else if (b==0 && a == 2) 
{ 
digitalWrite(in11, HIGH); 
digitalWrite(in12, LOW); 
digitalWrite(in13, 
HIGH); 
digitalWrite(in14, LOW); 
digitalWrite(in21, LOW); 
digitalWrite(in22, 
HIGH); 
digitalWrite(in23, 
HIGH); 
Page 14 of 26 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 digitalWrite(in24, LOW); 
analogWrite(en1A, 160); 
analogWrite(en2A, 160);
analogWrite(en2B, 240); 
analogWrite(en1B, 160); 
} 
else if (a==0 && b==0) 
{ 
analogWrite(en1A, 140); 
analogWrite(en1B, 140); 
analogWrite(en2A, 140); 
analogWrite(en2B, 140); 
} 
else if (a==1 && b==1) 
{ 
// Turn off motors 
analogWrite(en1A, 0); 
analogWrite(en1B, 0); 
analogWrite(en2A, 0); 
analogWrite(en2B, 0); 
GetColors(); 
if (Red <=15 && Green <=50 && Blue <=30) //If the values are low it's likely the white color (all the colors are present) 
{Serial.println("White"); 
stop(); 
} 
else if (Red<Blue && Red<=Green && Red<23 && Blue<55 && Green < 75) //if Red value is the lowest one and smaller thant 23 it's likely Red 
{ Serial.println("Red"); 
reverse(); 
} 
else 
{ 
Serial.println("Unknown"); 
} 
} 
else if (a==2 && b==2) 
{ 
digitalWrite(in11, HIGH); 
digitalWrite(in12, LOW); 
Page 15 of 26 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 
digitalWrite(in13, LOW); 
digitalWrite(in14, HIGH); 
digitalWrite(in21, HIGH); 
digitalWrite(in22, LOW); 
digitalWrite(in23, HIGH);
digitalWrite(in24, LOW); 
analogWrite(en1A, 140); 
analogWrite(en1B, 140); 
analogWrite(en2A, 140); 
analogWrite(en2B, 140); 
} 
} 
void reverse() 
{ 
digitalWrite(in11, LOW); 
digitalWrite(in12, 
HIGH); 
digitalWrite(in13, HIGH); 
digitalWrite(in14, LOW); 
digitalWrite(in21, LOW); 
digitalWrite(in22, 
HIGH); 
digitalWrite(in23, HIGH); 
digitalWrite(in24, LOW); 
analogWrite(en1A, 160); 
analogWrite(en1B, 160); 
analogWrite(en2A, 0); 
analogWrite(en2B, 160); 
_delay_ms(1000); 
digitalWrite(in11, LOW); 
digitalWrite(in12, 
HIGH); 
digitalWrite(in13, HIGH); 
digitalWrite(in14, LOW); 
digitalWrite(in21, HIGH); 
digitalWrite(in22, LOW); 
digitalWrite(in23, LOW); 
digitalWrite(in24, HIGH); 
analogWrite(en1A, 160); 
analogWrite(en1B, 0); 
Page 16 of 26 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 analogWrite(en2A, 160); 
analogWrite(en2B, 160); 
_delay_ms(1000);
digitalWrite(in11, HIGH); 
digitalWrite(in12, LOW); 
digitalWrite(in13, LOW); 
digitalWrite(in14, HIGH); 
digitalWrite(in21, LOW); 
digitalWrite(in22, HIGH); 
digitalWrite(in23, HIGH); 
digitalWrite(in24, LOW); 
analogWrite(en1A, 160); 
analogWrite(en1B, 160); 
analogWrite(en2A, 0); 
analogWrite(en2B, 160); 
_delay_ms(1000); 
} 
void GetColors() 
{ 
digitalWrite(s2, LOW); //S2/S3 levels define which set of photodiodes we are using LOW/LOW is for RED LOW/HIGH is for Blue and HIGH/HIGH is for green 
digitalWrite(s3, LOW); 
Red = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH); //here we wait until "out" go LOW, we start measuring the duration and stops when "out" is HIGH again, if you have trouble with this expression check the bottom of the code 
delay(20); 
digitalWrite(s3, HIGH); //Here we select the other color (set of photodiodes) and measure the other colors value using the same techinque 
Blue = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH); 
delay(20); 
digitalWrite(s2, HIGH); 
Green = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH); 
delay(20); 
} 
Page 17 of 26 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 
Data Storing And Output Part On Arduino Uno 
#define CURRENT_SENSOR_PIN A1 
#define ANALOG_IN_PIN A0 
#include <LiquidCrystal.h> // includes the LiquidCrystal Library
LiquidCrystal lcd(4, 3, 8, 7, 6, 5); 
// Define the maximum current that the ACS712 current sensor module can measure double MAX_CURRENT = 5.0; // Amps 
// Define analog input 
// Floats for ADC voltage & Input voltage 
float adc_voltage = 0.0; 
float in_voltage = 0.0; 
// Floats for resistor values in divider (in ohms) 
float R1 = 30000.0; 
float R2 = 7500.0; 
// Float for Reference Voltage 
float ref_voltage = 5.0; 
// Integer for ADC value 
int adc_value = 0; 
void setup(){ 
// Setup Serial Monitor 
Serial.begin(9600); 
lcd.begin(16,2); 
} 
void loop(){ 
// Read the Analog Input 
adc_value = analogRead(ANALOG_IN_PIN); 
// Determine voltage at ADC input 
adc_voltage = (adc_value * ref_voltage) / 1024.0; 
// Calculate voltage at divider input 
in_voltage = adc_voltage*(R1+R2)/R2; 
// Print results to Serial Monitor to 2 decimal places 
lcd.setCursor(4,0); 
lcd.print("Volts: "); 
lcd.println(in_voltage); 
Page 18 of 26 
PROJECT 1 MICRCONTROLLER AND EMBEDDED SYSTEMS LFR PHASE 3 
// Read the voltage from the ACS712 current sensor module float voltage = analogRead(CURRENT_SENSOR_PIN);
// Convert the voltage to current 
float current = (voltage / 1024.0) * MAX_CURRENT; 
// Print the current to the serial monitor 
lcd.setCursor(3,1); 
lcd.print("Current: "); 
